---
# Controller Service
kind: Deployment
apiVersion: apps/v1
metadata:
  name: efs-csi-controller
  namespace: {{ aws_efs_csi_namespace }}
  labels:
    app.kubernetes.io/name: aws-efs-csi-driver
spec:
  replicas: {{ aws_efs_csi_controller_replicas }}
  selector:
    matchLabels:
      app: efs-csi-controller
      app.kubernetes.io/name: aws-efs-csi-driver
      app.kubernetes.io/instance: kustomize
  template:
    metadata:
      labels:
        app: efs-csi-controller
        app.kubernetes.io/name: aws-efs-csi-driver
        app.kubernetes.io/instance: kustomize
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: efs-csi-controller-sa
      priorityClassName: system-cluster-critical
      securityContext:
        fsGroup: 0
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0     
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
        - key: node-role.kubernetes.io/control-plane
          effect: NoSchedule
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
{% if kube_version is version('v1.20.0', '<') %}
                  - key: node-role.kubernetes.io/master
{% else %}
                  - key: node-role.kubernetes.io/control-plane
{% endif %}
                    operator: In
                    values:
                      - ""
      containers:
        - name: efs-plugin
          securityContext:
            privileged: true
          image: {{ aws_efs_csi_driver_image_repo }}:{{ aws_efs_csi_driver_image_tag }}
          imagePullPolicy: IfNotPresent
          args:
            - --endpoint=$(CSI_ENDPOINT)
            - --logtostderr
            - --v=2
            - --delete-access-point-root-dir=false
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: CSI_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName             
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
{% if timezone_extra_volumes %}
            - name: {{ timezone_extra_volumes.name }}
              mountPath: {{ timezone_extra_volumes.mountPath }}
{% endif %}
          ports:
            - name: healthz
              containerPort: 9909
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 10
            failureThreshold: 5
        - name: csi-provisioner
          image: {{ aws_efs_csi_external_provisioner_image_repo }}:{{ aws_efs_csi_external_provisioner_image_tag }}
          imagePullPolicy: IfNotPresent
          args:
            - --csi-address=$(ADDRESS)
            - --v=2
            - --feature-gates=Topology=true
            - --extra-create-metadata
            - --leader-election
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
{% if timezone_extra_volumes %}
            - name: {{ timezone_extra_volumes.name }}
              mountPath: {{ timezone_extra_volumes.mountPath }}
{% endif %}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
        - name: liveness-probe
          image: {{ aws_efs_csi_livenessprobe_image_repo }}:{{ aws_efs_csi_livenessprobe_image_tag }}
          imagePullPolicy: IfNotPresent
          args:
            - --csi-address=/csi/csi.sock
            - --health-port=9909
          volumeMounts:
            - name: socket-dir
              mountPath: /csi       
{% if timezone_extra_volumes %}
            - name: {{ timezone_extra_volumes.name }}
              mountPath: {{ timezone_extra_volumes.mountPath }}
{% endif %}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true   
      volumes:
        - name: socket-dir
          emptyDir: {}
{% if timezone_extra_volumes %}
        - name: {{ timezone_extra_volumes.name }}
          hostPath:
            path: {{ timezone_extra_volumes.hostPath }}
{% endif %}
